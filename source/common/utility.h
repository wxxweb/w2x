/******************************************************************************
 * 文件：	utility.h
 * 描述：	实用的函数和宏定义，提高编码效率和健壮性.
 * 作者：	wu.xiongxing
 * 邮箱：	wxxweb@gmail.com
 * 时间：	2013-05-24
 ******************************************************************************/

#ifndef __W2X_COMMON_UTILITY_MACROS_H__
#define __W2X_COMMON_UTILITY_MACROS_H__

#include "debug.h"


/* 不想为了一个 NULL 而包含一个头文件，顾在此定义 NULL */
#ifndef NULL
#  ifdef __cplusplus
#    define NULL	0
#  else
#    define NULL ((void *)0)
#  endif
#endif /* NULL */


/* 指明一个变量没有被使用 */
#ifndef UNUSED
#  ifdef _DEBUG
#    define UNUSED(x) (x)
#  else
#    define UNUSED(x) { (x)=(x); }
#  endif
#endif /* UNUSED */


/* 禁止使用拷贝构造函数和 operator= 赋值操作的宏应该类的 private: 中使用 */
#ifndef W2X_DISALLOW_COPY_AND_ASSIGN
#define W2X_DISALLOW_COPY_AND_ASSIGN(ClassName)	\
	private:									\
		ClassName(const ClassName&);			\
		void operator =(const ClassName&);
#endif /* W2X_DISALLOW_COPY_AND_ASSIGN */


/* 安全释放栈内存，防止 delete 后产生野指针 */
#ifndef SAFE_DELETE
#  ifdef _DEBUG
#	 define SAFE_DELETE(p) \
	 { if (NULL != (p)) { delete (p); (p) = NULL; } }	
#  else
#	 define SAFE_DELETE(p) \
	 { if (NULL != (p)) { try { delete (p); } catch(...) {} (p) = NULL; } }
#  endif
#endif /* SAFE_DELETE */


/* 安全释放栈内存，防止 delete[] 后产生野指针 */
#ifndef SAFE_DELETE_ARRAY
#  ifdef _DEBUG
#	 define SAFE_DELETE_ARRAY(p) \
	 { if (NULL != (p)) { delete[] (p); (p) = NULL; } }	
#  else
#	 define SAFE_DELETE_ARRAY(p) \
	 { if (NULL != (p)) { try { delete[] (p); } catch(...) {} (p) = NULL; } }
#  endif
#endif /* SAFE_DELETE_ARRAY */


/* 安全释放栈内存，防止 free() 后产生野指针 */
#ifndef SAFE_FREE
#  ifdef _DEBUG
#	 define SAFE_FREE(p) \
	 { if (NULL != (p)) { free((p)); (p) = NULL; } }
#  else
#	 define SAFE_FREE(p) \
	 { if (NULL != (p)) { try { free((p)); } catch(...) {} (p) = NULL; } }
#  endif
#endif /* SAFE_FREE */


/* 判断表达式 e 的结果是否为真 */
#ifndef IS_TRUE
#  define IS_TRUE(e) (static_cast<bool>(e))
#endif


/* 如果表达式 e 的结果为假, 返回指定值 r */
#ifndef IF_FALSE_RETURN
#  define IF_FALSE_RETURN(e,r) if (!IS_TRUE(e)) {return (r);}
#endif


/* 如果表达式 e 的结果为假, 弹出断言对话框, 并返回 r */
#ifndef IF_FALSE_ASSERT_RETURN
#  define IF_FALSE_ASSERT_RETURN(e,r) ASSERT(IS_TRUE(e)); IF_FALSE_RETURN((e), (r))
#endif


/* 如果指针 p 值为空, 返回 r */
#ifndef IF_NULL_RETURN
#  define IF_NULL_RETURN(p,r) if (NULL == (p)) {return (r);}
#endif


/* 如果指针 p 值为空,  弹出断言对话框, 并返回 r */
#ifndef IF_NULL_ASSERT_RETURN
#  define IF_NULL_ASSERT_RETURN(p,r) ASSERT(NULL != (p)); IF_NULL_RETURN((p), (r))
#endif


#endif /* __W2X_COMMON_UTILITY_MACROS_H__ */